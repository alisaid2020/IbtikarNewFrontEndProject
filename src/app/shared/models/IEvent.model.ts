import { ICenter } from './ICenter.model';
import { ISpecialist } from './ISpecialist.model';
import { IUser } from './IUser.model';

export interface IEvent {
  id: number;
  specialtyId: number;
  eventTypeId: number;
  centerId: number;
  eventManagerId: number;
  attendanceManagerId: number;
  paymentTypeId: number;
  attendanceTypeId: number;
  groundRoundId: number;
  groundRoundViewModel?: any;
  userId: string;
  updatedByUserId?: any;
  certificateTemplateId: number;
  certificateTitle: string;
  feedbackFormId: number;
  name: string;
  arabicName?: any;
  englishName: string;
  notes: string;
  arabicNotes?: any;
  englishNotes: string;
  hours: number;
  hoursDescription: string;
  hoursArabicDescription?: any;
  hoursEnglishDescription: string;
  body: string;
  tag?: any;
  tagId: number;
  arabicBody?: any;
  englishBody: string;
  eventImage: string;
  deepLink: string;
  hideRegisteredUsers: boolean;
  hideRegisterationLinkButton: boolean;
  arabicTerms?: any;
  englishTerms: string;
  terms: string;
  createdOn: string;
  createdOnString: string;
  updatedByUserOn: string;
  updatedByUserOnString: string;
  eventOn: string;
  eventOnString: string;
  eventEndOn: string;
  eventEndOnString: string;
  registerationOpenOn: string;
  registerationOpenOnString: string;
  registerationEndOn: string;
  registerationEndOnString: string;
  earlyRegisterationEndOn: string;
  earlyRegisterationEndOnString: string;
  attendanceOn: string;
  attendanceOnString: string;
  attendanceTimingPeroid: number;
  eventDaysDuration: number;
  cancelRegistrationAfterHours: number;
  eventPrices: EventPrice[];
  specialty: ISpecialist;
  eventType: ISpecialist;
  center: ICenter;
  paymentType: ISpecialist;
  attendanceType: ISpecialist;
  user: IUser;
  updateByUser?: IUser;
  subscribedUsersCount: number;
  subscribedUsers?: any;
  speakers?: any;
  eventDays?: any;
  materials?: any;
  sponsors?: any;
  isRegisterationOpend: boolean;
  isEarlyRegisterationOpened: boolean;
  isCurrentUserRegistered: boolean;
  isHavePendingRegistration: boolean;
  pendingRegistrationId: number;
  isCurrentUserFavorite: boolean;
  eventStatus: number;
  attendancePercentage: number;
  eventSupportedLanguage: number;
  maxSeatsCount: number;
  organizerEmail: string;
  organizerName: string;
  organizerMobile: string;
  eventLink?: any;
  onlineEventReportLink?: any;
  eventLinkGeneratedOn: string;
  eventCategory: number;
  eventOnlineType: number;
  eventOnlineStatus: number;
}

interface EventPrice {
  id: number;
  eventId: number;
  priceTypeId: number;
  amount: number;
  isEarlyPrice: boolean;
  arabicName: string;
  englishName: string;
  name: string;
  isActive: boolean;
}
